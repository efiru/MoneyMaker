name: 'Process artifacts'
description: 'Process artifact files'

runs:
  using: "composite"
  steps:
    - name: Patch macOS launcher
      shell: bash
      if: runner.os == 'macOS'
      run: |
        sed -i '' -e "s/oop/${EXECUTABLE_NAME}/" "${{ env.ZIP_NAME }}/launcher.command"
        chmod +x "${{ env.ZIP_NAME }}/launcher.command"

    - name: Copy missing dylibs
      shell: bash
      if: runner.os == 'macOS' && matrix.cxx == 'clang++'
      # FIXME: temp disable asan for macOS due to github issues
      run: |
        if [[ "${BUILD_TYPE}" =~ "Deb" ]]; then
          mkdir lib
          # cp /Library/Developer/CommandLineTools/usr/lib/clang/16/lib/darwin/libclang_rt.asan_osx_dynamic.dylib lib
          # install_name_tool -change @rpath/libclang_rt.asan_osx_dynamic.dylib @executable_path/lib/libclang_rt.asan_osx_dynamic.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
          mv lib ${{ env.ZIP_NAME }}/
        fi

    - name: Copy missing dylibs (g++)
      shell: bash
      if: runner.os == 'macOS' && startsWith(matrix.cxx, 'g++')
      run: |
        mkdir lib
        cp /opt/homebrew/lib/gcc/13/libstdc++.6.dylib /opt/homebrew/lib/gcc/13/libgcc_s.1.1.dylib lib
        install_name_tool -change /opt/homebrew/lib/gcc/13/libstdc++.6.dylib @executable_path/lib/libstdc++.6.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
        install_name_tool -change /opt/homebrew/lib/gcc/13/libgcc_s.1.1.dylib @executable_path/lib/libgcc_s.1.1.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
        mv lib ${{ env.ZIP_NAME }}/

    - name: Copy missing dlls
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'cl'
      run: |
        if [[ "${BUILD_TYPE}" =~ "Deb" ]]; then
          # runtime debug DLLs
          cp "$(which ucrtbased.dll)" \
             "$(which VCRUNTIME140_1D.dll)" \
             "$(which MSVCP140D.dll)" \
             "$(which VCRUNTIME140D.dll)" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}

          # sanitizers DLLs
          vcver=$(cat "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/Microsoft.VCToolsVersion.default.txt")
          vcbindir="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/${vcver}/bin/Hostx64/x64/"
          cp "${vcbindir}/clang_rt.asan_dynamic-x86_64.dll" \
             "${vcbindir}/clang_rt.asan_dbg_dynamic-x86_64.dll" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
        fi

        # runtime release DLLs
        # if [[ "${BUILD_TYPE}" =~ "Rel" ]]; then
        cp "$(which ucrtbase.dll)" \
             "$(which VCRUNTIME140_1.dll)" \
             "$(which MSVCP140.dll)" \
             "$(which VCRUNTIME140.dll)" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
        # fi
    

    - name: Find mingw64 directory
      if: runner.os == 'Windows' && matrix.cxx == 'g++'
      shell: bash
      run: |
        echo "Searching for directories named 'mingw64':"
        find . -type d -iname "mingw64"
        

    - name: Download and extract Winlibs (MinGW) for g++ (UCRT)
      if: runner.os == 'Windows' && matrix.cxx == 'g++'
      shell: bash
      run: |
        echo "Downloading Winlibs (UCRT) distribution..."
        curl -L -o mingw.7z "https://github.com/brechtsanders/winlibs_mingw/releases/download/14.2.0posix-12.0.0-ucrt-r3/winlibs-x86_64-posix-seh-gcc-14.2.0-llvm-19.1.7-mingw-w64ucrt-12.0.0-r3.7z"
        echo "Extracting Winlibs..."
        mkdir mingw_extracted
        7z x mingw.7z -omingw_extracted
        echo "Extraction complete. Directory contents:"
        ls -la mingw_extracted

    - name: Copy stdlib (MinGW)
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'g++'
      run: |
        cp mingw_extracted/mingw64/bin/libstdc++-6.dll \
           mingw_extracted/mingw64/bin/libgcc_s_seh-1.dll \
           mingw_extracted/mingw64/bin/libwinpthread-1.dll \
           ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}

    - name: Install SFML
      if: runner.os == 'macOS'
      shell: bash
      run: brew install sfml

    - name: Build Project (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        clang++ -std=c++17 main.cpp -o moneymaker -I/opt/homebrew/include -L/opt/homebrew/lib -lsfml-graphics -lsfml-window -lsfml-system